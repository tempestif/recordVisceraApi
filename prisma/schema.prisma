// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ER図の生成
generator erd {
  provider                  = "prisma-erd-generator"
  theme                     = "forest"
  output                    = "ERD.md"
  includeRelationFromFields = true
}

// ユーザー
model User {
  // メールアドレス
  email                String
  // ユーザーネーム
  name                 String
  // パスワード
  password             String
  // Email認証トークン
  verifyEmailHash      String?
  // パスワード再設定認証トークン
  passResetHash        String?
  // メールアドレス認証有無
  verified             Int                    @default(0)
  // ログインステータス
  loginStatus          Int                    @default(0)
  // 紐づけ
  Bowel_Movement       Bowel_Movement[]
  Profile              Profile?
  User_Medical_History User_Medical_History?
  User_Setting         User_Setting?
  Daily_Report         Daily_Report[]
  Clinic_Report        Clinic_Report[]
  Medication_Info_User Medication_Info_User[]
  Medication_Schedule  Medication_Schedule[]
  Medication_Result    Medication_Result[]
  // id, 作成日時, 更新日時
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt            DateTime               @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("users")
}

// ユーザープロフィール
model Profile {
  // 性別
  sex       Int?
  // 身長
  height    Float?
  // 生年月日
  birthday  DateTime? @db.Date
  // id, ユーザー紐づけ, 作成日時, 更新日時
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique
  createdAt DateTime  @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt DateTime  @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("profiles")
}

// 治療歴
model User_Medical_History {
  // 回腸造瘻術の有無
  ileostomy Int
  // id, ユーザー紐づけ, 作成日時, 更新日時
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt DateTime @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("user_medical_history")
}

// ユーザー設定
model User_Setting {
  // テーマカラー
  themeColor Int
  // id, ユーザー紐づけ, 作成日時, 更新日時
  id         Int      @id @default(autoincrement())
  User       User     @relation(fields: [userId], references: [id])
  userId     Int      @unique
  createdAt  DateTime @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt  DateTime @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("user_setting")
}

// 便の状態
model Bowel_Movement {
  // 日時
  date                 DateTime
  // 日別の集計のためにdayを追加
  day                  DateTime            @db.Date
  // 便の状態
  Bristol_Stool_Scales Bristol_Stool_Scale @relation(fields: [bristolStoolScale], references: [id])
  bristolStoolScale    Int
  // 血の有無
  blood                Int
  // 粘液の有無
  drainage             Int
  // 備考
  note                 String?
  // id, ユーザー紐づけ, 作成日時, 更新日時
  id                   Int                 @id @default(autoincrement())
  User                 User                @relation(fields: [userId], references: [id])
  userId               Int
  createdAt            DateTime            @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt            DateTime            @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("bowel_movements")
}

// ブリストルスケール
model Bristol_Stool_Scale {
  id             Int              @id @default(autoincrement())
  typeName       String           @unique
  Bowel_Movement Bowel_Movement[]

  @@map("bristol_stool_scales")
}

// 今日の体調
model Daily_Report {
  // 日
  day                              DateTime                          @db.Date
  // 体温
  Temp                Temp?
  // 体重
  Weight              Weight?
  // 腹痛
  Stomachache         Stomachache?
  // 体調
  Condition           Condition?
  // 関節痛の有無
  Arthritis           Arthritis?
  // 皮膚病変の有無
  Skin_Lesions        Skin_Lesions?
  // 眼病変の有無
  Ocular_Lesitions    Ocular_Lesitions?
  // 肛門病変の有無
  Anorectal_Lesitions Anorectal_Lesitions?
  // 腹部腫瘤の有無
  Abdominal           Abdominal?
  // id, ユーザー紐づけ, 作成日時, 更新日時
  id                               Int                               @id @default(autoincrement())
  User                             User                              @relation(fields: [userId], references: [id])
  userId                           Int
  createdAt                        DateTime                          @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt                        DateTime                          @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@unique([userId, day], name: "dailyReportUnique")
  @@map("daily_report")
}

// 体温
model Temp {
  // 結果
  result        Float?
  // id, 今日の体調紐づけ, 作成日時, 更新日時
  id            Int          @id @default(autoincrement())
  Daily_Report  Daily_Report @relation(fields: [dailyReportId], references: [id], onDelete: Cascade)
  dailyReportId Int          @unique
  createdAt     DateTime     @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt     DateTime     @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("temp")
}

// 体重
model Weight {
  // 結果
  result        Float?
  // id, 今日の体調紐づけ, 作成日時, 更新日時
  id            Int          @id @default(autoincrement())
  Daily_Report  Daily_Report @relation(fields: [dailyReportId], references: [id], onDelete: Cascade)
  dailyReportId Int          @unique
  createdAt     DateTime     @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt     DateTime     @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("weight")
}

// 腹痛
model Stomachache {
  // 結果
  Stomachache_Scale_Types   Stomachache_Scale_Types @relation(fields: [stomachache_Scale_TypesId], references: [id])
  stomachache_Scale_TypesId Int
  // id, 今日の体調紐づけ, 作成日時, 更新日時
  id                        Int                     @id @default(autoincrement())
  Daily_Report              Daily_Report            @relation(fields: [dailyReportId], references: [id], onDelete: Cascade)
  dailyReportId             Int                     @unique
  createdAt                 DateTime                @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt                 DateTime                @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("stomachache")
}

// 腹痛スケール区分
model Stomachache_Scale_Types {
  id                       Int                        @id @default(autoincrement())
  typeName                 String                     @unique
  score                    Int
  Stomachache Stomachache[]

  @@map("stomachache_scale_types")
}

// 体調
model Condition {
  // 結果
  Condition_Scale_Types   Condition_Scale_Types @relation(fields: [condition_Scale_TypesId], references: [id])
  condition_Scale_TypesId Int
  // id, 今日の体調紐づけ, 作成日時, 更新日時
  id                      Int                   @id @default(autoincrement())
  Daily_Report            Daily_Report          @relation(fields: [dailyReportId], references: [id], onDelete: Cascade)
  dailyReportId           Int                   @unique
  createdAt               DateTime              @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt               DateTime              @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("condition")
}

// 体調スケール区分
model Condition_Scale_Types {
  id                     Int                      @id @default(autoincrement())
  typeName               String                   @unique
  score                  Int
  Condition Condition[]

  @@map("condition_scale_types")
}

// 関節痛の有無
model Arthritis {
  // 結果
  result        Int?
  // id, 今日の体調紐づけ, 作成日時, 更新日時
  id            Int          @id @default(autoincrement())
  Daily_Report  Daily_Report @relation(fields: [dailyReportId], references: [id], onDelete: Cascade)
  dailyReportId Int          @unique
  createdAt     DateTime     @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt     DateTime     @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("arthritis")
}

// 皮膚病変の有無
model Skin_Lesions {
  // 結果
  result        Int?
  // id, 今日の体調紐づけ, 作成日時, 更新日時
  id            Int          @id @default(autoincrement())
  Daily_Report  Daily_Report @relation(fields: [dailyReportId], references: [id], onDelete: Cascade)
  dailyReportId Int          @unique
  createdAt     DateTime     @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt     DateTime     @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("skin_lesions")
}

// 眼病変の有無
model Ocular_Lesitions {
  // 結果
  result        Int?
  // id, 今日の体調紐づけ, 作成日時, 更新日時
  id            Int          @id @default(autoincrement())
  Daily_Report  Daily_Report @relation(fields: [dailyReportId], references: [id], onDelete: Cascade)
  dailyReportId Int          @unique
  createdAt     DateTime     @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt     DateTime     @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("daily_report_ocular_lesions")
}

// 肛門病変の有無
model Anorectal_Lesitions {
  // 痔瘻
  fistula       Int?
  // その他の肛門病変
  others        Int?
  // id, 今日の体調紐づけ, 作成日時, 更新日時
  id            Int          @id @default(autoincrement())
  Daily_Report  Daily_Report @relation(fields: [dailyReportId], references: [id], onDelete: Cascade)
  dailyReportId Int          @unique
  createdAt     DateTime     @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt     DateTime     @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("daily_report_anorectal_lesions")
}

// 腹部腫瘤の有無
model Abdominal {
  // 結果
  Abdominal_Scale_Types   Abdominal_Scale_Types @relation(fields: [abdominal_Scale_TypesId], references: [id])
  abdominal_Scale_TypesId Int
  // id, 今日の体調紐づけ, 作成日時, 更新日時
  id                      Int                   @id @default(autoincrement())
  Daily_Report            Daily_Report          @relation(fields: [dailyReportId], references: [id], onDelete: Cascade)
  dailyReportId           Int                   @unique
  createdAt               DateTime              @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt               DateTime              @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("abdominal")
}

// 腹部腫瘤スケール区分
model Abdominal_Scale_Types {
  id                     Int                      @id @default(autoincrement())
  typeName               String                   @unique
  score                  Int
  Abdominal Abdominal[]

  @@map("abdominal_scale_types")
}

// 通院記録
model Clinic_Report {
  // 日時
  date        DateTime
  // 検査予定/結果
  Checkup     Checkup?
  // 通院ノート
  Clinic_Note Clinic_Note?
  // id, ユーザー紐づけ, 作成日時, 更新日時
  id          Int          @id @default(autoincrement())
  User        User         @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime     @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt   DateTime     @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@unique(fields: [userId, date], name: "report_identifier")
  @@map("clinic_report")
}

// 検査予定/結果
model Checkup {
  // 血液検査
  Checkup_Blood  Checkup_Blood?
  // MRI
  Checkup_Mri    Checkup_Mri?
  // CT
  Checkup_Ct     Checkup_Ct?
  // カスタム検査
  Checkup_Custom Checkup_Custom?
  // id, 通院記録, 作成日時, 更新日時
  id             Int             @id @default(autoincrement())
  Clinic_Report  Clinic_Report   @relation(fields: [clinicReportId], references: [id])
  clinicReportId Int             @unique
  createdAt      DateTime        @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt      DateTime        @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("checkup")
}

// 血液検査
model Checkup_Blood {
  // Hr
  hematocrit               Int?
  // CRP
  crp                      Int?
  // その他
  Checkup_Blood_Additional Checkup_Blood_Additional[]
  // id, 検査予定/結果, 作成日時, 更新日時
  id                       Int                        @id @default(autoincrement())
  Checkup                  Checkup                    @relation(fields: [checkupId], references: [id])
  checkupId                Int                        @unique
  createdAt                DateTime                   @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt                DateTime                   @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("checkup_blood")
}

// その他の血液検査
model Checkup_Blood_Additional {
  // 検査項目名
  itemName       String
  // 検査結果
  result         String?
  // 単位
  unit           String?
  // id, 血液検査, 作成日時, 更新日時
  id             Int           @id @default(autoincrement())
  Checkup_Blood  Checkup_Blood @relation(fields: [checkupBloodId], references: [id])
  checkupBloodId Int
  createdAt      DateTime      @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt      DateTime      @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("checkup_blood_additional")
}

// MRIの検査結果
model Checkup_Mri {
  // 結果
  result    String?
  // id, 検査予定/結果, 作成日時, 更新日時
  id        Int      @id @default(autoincrement())
  Checkup   Checkup  @relation(fields: [checkupId], references: [id])
  checkupId Int      @unique
  createdAt DateTime @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt DateTime @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("checkup_mri")
}

// CTの検査結果
model Checkup_Ct {
  // 結果
  result    String?
  // id, 検査予定/結果, 作成日時, 更新日時
  id        Int      @id @default(autoincrement())
  Checkup   Checkup  @relation(fields: [checkupId], references: [id])
  checkupId Int      @unique
  createdAt DateTime @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt DateTime @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("checkup_ct")
}

// ユーザーカスタムの検査
model Checkup_Custom {
  // 検査名
  checkupName String
  // 検査結果
  result      String?
  // id, 検査予定/結果, 作成日時, 更新日時
  id          Int      @id @default(autoincrement())
  Checkup     Checkup  @relation(fields: [checkupId], references: [id])
  checkupId   Int      @unique
  createdAt   DateTime @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt   DateTime @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("checkup_custom")
}

// 通院ノート
model Clinic_Note {
  // ノート
  note           String?
  // id, 通院記録, 作成日時, 更新日時
  id             Int           @id @default(autoincrement())
  Clinic_Report  Clinic_Report @relation(fields: [clinicReportId], references: [id])
  clinicReportId Int           @unique
  createdAt      DateTime      @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt      DateTime      @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("clinic_note")
}

// ユーザー登録薬剤リスト
model Medication_Info_User {
  // 薬剤
  Medication_Info_Master Medication_Info_Master @relation(fields: [medicationId], references: [id])
  medicationId           Int
  // 服用個数
  count                  Float?
  // id, ユーザー紐づけ, 作成日時, 更新日時
  id                     Int                    @id @default(autoincrement())
  User                   User                   @relation(fields: [userId], references: [id])
  userId                 Int
  createdAt              DateTime               @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt              DateTime               @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime
  Medication_Schedule    Medication_Schedule[]
  Medication_Result      Medication_Result[]

  @@map("medication_info_user")
}

// 薬剤マスタ
model Medication_Info_Master {
  // 薬剤名
  name                 String
  // YJコード
  yjCode               String
  // 規格
  specification        String
  // id, ユーザー薬剤紐づけ, 作成日時, 更新日時
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt            DateTime               @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime
  Medication_Info_User Medication_Info_User[]

  @@map("medication_info_master")
}

// ユーザー服薬予定
model Medication_Schedule {
  // 服用タイミング
  Medication_Timing_Types Medication_Timing_Types @relation(fields: [timing], references: [id])
  timing                  Int
  // 薬剤
  Medication_Info_User    Medication_Info_User    @relation(fields: [medicationInfoId], references: [id])
  medicationInfoId        Int
  // id, ユーザー紐づけ, 作成日時, 更新日時
  id                      Int                     @id @default(autoincrement())
  User                    User                    @relation(fields: [userId], references: [id])
  userId                  Int
  createdAt               DateTime                @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt               DateTime                @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("medication_schedule")
}

// 服用タイミング区分
model Medication_Timing_Types {
  id                  Int                   @id @default(autoincrement())
  typeName            String                @unique
  Medication_Schedule Medication_Schedule[]

  @@map("medication_timing_types")
}

// ユーザー服薬記録
model Medication_Result {
  // 日時
  date                 DateTime
  // 薬剤
  Medication_Info_User Medication_Info_User @relation(fields: [medicationInfoId], references: [id])
  medicationInfoId     Int
  // id, ユーザー紐づけ, 作成日時, 更新日時
  id                   Int                  @id @default(autoincrement())
  User                 User                 @relation(fields: [userId], references: [id])
  userId               Int
  createdAt            DateTime             @default(dbgenerated("NOW()")) @db.DateTime
  updatedAt            DateTime             @default(dbgenerated("NOW() ON UPDATE NOW()")) @db.DateTime

  @@map("medication_result")
}
